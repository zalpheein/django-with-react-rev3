"""
Django settings for askcompany project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-92dcemwzkbg&1dtb#l+*%hyu))mo(4ug!a$&r%a3tcwswn02hb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 3rd 패키지
    'rest_framework',
    'rest_framework.authtoken',

    # 추가 App
    'accounts',
    'instagram',


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'askcompany.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'askcompany.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# PERMISSION_CLASS 의 전역 설정 방법
# 터미널에서 http http://127.0.0.1:8000/post/1/ 로 요청 시,
#   Authentication credentials were not provided. 라는 문구로 인증이 거부됨
# 페이징 기능 추가 + 호출 회수 제한
REST_FRAMEWORK = {
    # 리스트의 페이징 기능
    'PAGE_SIZE': 3,
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',

    # 접근 권한 인증
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

    # API 호출 회수 제한
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        # 'anon': None,
        'user': '3/day',
    },

    # user2 의 토큰 생성 방법
    #   http POST http://127.0.0.1:8000/accounts/api-token-auth/ username=user2 password=비밀번호
    #   생성된 토근 : 6d8018ad7df09e2d719893d07569b99999999999


    # 다음과 같이 user2 로 생성한 토큰을 이용하여 1번 post 를 조회 할경우 오류 발생
    #   http GET http://127.0.0.1:8000/post/1/ "Authorization: Token 6d8018ad7df09e2d719893d07569b99999999999"
    # 이유는 현재 디폴트로 정의된 인증이 세션과 베이직 인증이어서 발생
    # 이를 위하여 다음과 같이 베이직 인증 대신 토큰 인증으로 변경 처리
    #
    # 이를 다시 토큰 인증 대신 jwt 사용을 위하여 주석처리
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',

        # 이를 위하여 다음과 같이 베이직 인증 대신 토큰 인증으로 변경 처리
        # 'rest_framework.authentication.BasicAuthentication',

        # jwt 를 사용하기 때문에 사용하지 않는 TokenAuthentication 코드 주석처리
        # 'rest_framework.authentication.TokenAuthentication',
        # django 4.0 에서는 "force_text" 가 제외되어 아래 코드가 오류남
        # 그래서 그냥 TokenAuthentication 으로 다시 변경 처리
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.TokenAuthentication',

        
    ]
}








